using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

namespace MazeGenerator_DLL
{
    [Flags]
    public enum MazeState
    {
        //0000 = No Walls
        //1111 = Left, Right, Down, Up
        NORTH = 1, //0001
        SOUTH = 2, //0010
        WEST = 4, //0100
        EAST = 8, //1000
        VISITED = 128 //1000 0000
    }

    /*
    WallState wallState = WallState.WEST | WallState.EAST; //1100
    wallState |= WallState.NORTH; //this adds North to it -> 1101
    wallState &= ~WallState.WEST; //removes West -> 1001
    */

    public struct Position
    {
        public int x;
        public int y;
    }


    public struct Neighbour
    {
        public Position Position;
        public MazeState wallShared;
    }

    public static class MazeGenerator
    {
        public static MazeState[,] GenerateMaze(int width, int height) //2 Dimensional array function
        {
            MazeState[,] maze = new MazeState[width, height];

            MazeState parameter = MazeState.NORTH | MazeState.SOUTH | MazeState.WEST | MazeState.EAST; //1111

            for (int i = 0; i < width; i++)
            {
                for(int j = 0; j < height; j++)
                {
                    maze[i, j] = parameter;
                }
            }

            return BackStep(maze, width, height);
        }

        //Recursive backtracker algorithm//
        private static MazeState[,] BackStep(MazeState[,] maze, int width, int height)
        {
            System.Random rng = new System.Random();
            Position pos = new Position { x = rng.Next(0, width), y = rng.Next(0, height) }; // random position in grid
            var posStack = new Stack<Position>(); // create a stack
            maze[pos.x, pos.y] |= MazeState.VISITED; // mark cell as visited

            //push onto stack
            posStack.Push(pos);

            //while there are stacks
            while (posStack.Count > 0)
            {
                //grab previous
                var currentCellPos = posStack.Pop();
                //Find neighbour
                List<Neighbour> neighbours = NotVisitedNeighbour(currentCellPos, maze, width, height);

                //if there is a neighbour
                if (neighbours.Count > 0)
                {
                    //push onto stack
                    posStack.Push(currentCellPos);
                    //grab random index from 0 to neighbour count
                    var randIndex = rng.Next(0, neighbours.Count);
                    //grab random neighbour
                    Neighbour randomNeighbour = neighbours[randIndex];
                    //grab that neighbours position
                    Position nPos = randomNeighbour.Position;

                    maze[currentCellPos.x, currentCellPos.y] &= ~randomNeighbour.wallShared; // remove wall at neighbour
                    maze[nPos.x, nPos.y] &= ~OppositeWall(randomNeighbour.wallShared); //remove opposite wall

                    maze[nPos.x, nPos.y] |= MazeState.VISITED; //Mark cell as visited

                    //push onto stack
                    posStack.Push(nPos);
                }
            }

            return maze;
        }

        //Checking if neighbour has been visited if it hasnt then add it to the list//
        private static List<Neighbour> NotVisitedNeighbour(Position pos, MazeState[,] maze, int width, int height)
        {
            List<Neighbour> list = new List<Neighbour>();

            if (pos.y < height - 1 && !maze[pos.x, pos.y + 1].HasFlag(MazeState.VISITED)) // if up and not visited
            {
                list.Add(new Neighbour { Position = new Position { x = pos.x, y = pos.y + 1 }, wallShared = MazeState.NORTH }); // add a new neighbour at position up and north wall;
            }

            if (pos.y > 0 && !maze[pos.x, pos.y - 1].HasFlag(MazeState.VISITED)) // if down and not visited
            {
                list.Add(new Neighbour { Position = new Position { x = pos.x, y = pos.y - 1 }, wallShared = MazeState.SOUTH }); // add a new neighbour at position down and south wall;
            }


            if (pos.x > 0 && !maze[pos.x - 1, pos.y].HasFlag(MazeState.VISITED)) // if Left and not visited
            {
                list.Add(new Neighbour { Position = new Position { x = pos.x - 1, y = pos.y }, wallShared = MazeState.WEST }); // add a new neighbour at position left and west wall;
            }

            if (pos.x < width - 1 && !maze[pos.x + 1, pos.y].HasFlag(MazeState.VISITED)) // if right and not visited
            {
                list.Add(new Neighbour { Position = new Position { x = pos.x + 1, y = pos.y }, wallShared = MazeState.EAST }); // add a new neighbour at position right and east wall;
            }

            return list;
        }

        //Switching to opposite wall//
        private static MazeState OppositeWall(MazeState wall)
        {
            if (wall == MazeState.NORTH)
            {
                wall = MazeState.SOUTH;
            }
            else if (wall == MazeState.SOUTH)
            {
                wall = MazeState.NORTH;
            }
            else if (wall == MazeState.EAST)
            {
                wall = MazeState.WEST;
            }
            else if (wall == MazeState.WEST)
            {
                wall = MazeState.EAST;
            }

            return wall;
        }
    }
}
